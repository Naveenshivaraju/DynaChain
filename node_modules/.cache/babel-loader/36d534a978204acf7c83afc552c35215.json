{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Demand\\\\Components\\\\ForcastStability\\\\ForcastStability.js\";\nimport React from 'react';\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\nimport data from './Data.json';\nconst chartdata = data.data;\nconsole.log(chartdata);\n\nconst CustomNode = ({\n  node,\n  x,\n  y,\n  size,\n  color,\n  blendMode,\n  onMouseEnter,\n  onMouseMove,\n  onMouseLeave,\n  onClick\n}) => {\n  if (node.data.serieId === 'B') {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${x},${y})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      r: size / 2,\n      fill: color,\n      style: {\n        mixBlendMode: blendMode\n      },\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  if (node.data.serieId === 'Forcast Stability') {\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${x},${y}) rotate(45)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      x: size * -0.5,\n      y: size * -0.5,\n      width: size,\n      height: size,\n      fill: color,\n      style: {\n        mixBlendMode: blendMode\n      },\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"g\", {\n    transform: `translate(${x},${y})`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: size * -0.5,\n    y: size * -0.5,\n    width: size,\n    height: size,\n    fill: color,\n    style: {\n      mixBlendMode: blendMode\n    },\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }));\n};\n\nfunction ForcastStability() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '500px',\n      width: '800px',\n      marginLeft: '290px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveScatterPlot, {\n    layers: ['grid', 'axes', 'markers', 'nodes', 'mesh', 'legends', 'annotations'],\n    colors: [\"#3c76d2\"],\n    markers: [{\n      axis: 'y',\n      value: 3,\n      lineStyle: {\n        stroke: '#b0413e',\n        strokeWidth: 2\n      },\n      legend: 'Vertical Marker',\n      legendOrientation: 'vertical'\n    }, {\n      axis: 'x',\n      value: 3000000,\n      lineStyle: {\n        stroke: '#b0413e',\n        strokeWidth: 2\n      },\n      legend: 'Horizontal Marker'\n    }],\n    renderNode: CustomNode,\n    data: chartdata,\n    margin: {\n      top: 60,\n      right: 140,\n      bottom: 100,\n      left: 90\n    },\n    xScale: {\n      type: 'linear',\n      min: 0,\n      max: 'auto'\n    },\n    xFormat: function (e) {\n      return e;\n    },\n    yScale: {\n      type: 'linear',\n      min: 0,\n      max: 'auto'\n    },\n    yFormat: function (e) {\n      return e;\n    },\n    blendMode: \"multiply\",\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Cumulative Volume',\n      legendPosition: 'middle',\n      legendOffset: 80,\n      tickRotation: -90\n    },\n    axisLeft: {\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'Predictability',\n      legendPosition: 'middle',\n      legendOffset: -60\n    },\n    tooltip: ({\n      node\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        background: 'white',\n        padding: '9px 12px',\n        border: '1px solid #ccc'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: node.style.color + ''\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, node.data.serieId), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }), `Volume: ${node.data.formattedX}`, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }), `Predictability: ${node.data.formattedY}`),\n    legends: [{\n      anchor: 'bottom-right',\n      direction: 'column',\n      justify: false,\n      translateX: 130,\n      translateY: 0,\n      itemWidth: 100,\n      itemHeight: 12,\n      itemsSpacing: 5,\n      itemDirection: 'left-to-right',\n      symbolSize: 12,\n      symbolShape: 'circle',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default ForcastStability;","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Demand/Components/ForcastStability/ForcastStability.js"],"names":["React","ResponsiveScatterPlot","data","chartdata","console","log","CustomNode","node","x","y","size","color","blendMode","onMouseEnter","onMouseMove","onMouseLeave","onClick","serieId","mixBlendMode","ForcastStability","height","width","marginLeft","axis","value","lineStyle","stroke","strokeWidth","legend","legendOrientation","top","right","bottom","left","type","min","max","e","orient","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","background","padding","border","style","formattedX","formattedY","anchor","direction","justify","translateX","translateY","itemWidth","itemHeight","itemsSpacing","itemDirection","symbolSize","symbolShape","effects","on","itemOpacity"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\nimport data from './Data.json'\r\n\r\nconst chartdata = data.data;\r\nconsole.log(chartdata);\r\n\r\nconst CustomNode = ({\r\n    node,\r\n    x,\r\n    y,\r\n    size,\r\n    color,\r\n    blendMode,\r\n    onMouseEnter,\r\n    onMouseMove,\r\n    onMouseLeave,\r\n    onClick,\r\n}) => {\r\n    if (node.data.serieId === 'B') {\r\n        return (\r\n            <g transform={`translate(${x},${y})`}>\r\n                <circle\r\n                    r={size / 2}\r\n                    fill={color}\r\n                    style={{ mixBlendMode: blendMode }}\r\n                    onMouseEnter={onMouseEnter}\r\n                    onMouseMove={onMouseMove}\r\n                    onMouseLeave={onMouseLeave}\r\n                    onClick={onClick}\r\n                />\r\n            </g>\r\n        )\r\n    }\r\n\r\n    if (node.data.serieId === 'Forcast Stability') {\r\n        return (\r\n            <g transform={`translate(${x},${y}) rotate(45)`}>\r\n                <rect\r\n                    x={size * -0.5}\r\n                    y={size * -0.5}\r\n                    width={size}\r\n                    height={size}\r\n                    fill={color}\r\n                    style={{ mixBlendMode: blendMode }}\r\n                    onMouseEnter={onMouseEnter}\r\n                    onMouseMove={onMouseMove}\r\n                    onMouseLeave={onMouseLeave}\r\n                    onClick={onClick}\r\n                />\r\n            </g>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <g transform={`translate(${x},${y})`}>\r\n            <rect\r\n                x={size * -0.5}\r\n                y={size * -0.5}\r\n                width={size}\r\n                height={size}\r\n                fill={color}\r\n                style={{ mixBlendMode: blendMode }}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseMove={onMouseMove}\r\n                onMouseLeave={onMouseLeave}\r\n                onClick={onClick}\r\n            />\r\n        </g>\r\n    )\r\n}\r\n\r\nfunction ForcastStability() {\r\n    return (\r\n        <div style={{height:'500px',width:'800px', marginLeft: '290px'}}>\r\n        <ResponsiveScatterPlot\r\n        layers={['grid', 'axes', 'markers', 'nodes', 'mesh', 'legends', 'annotations']}\r\n        colors={[\"#3c76d2\"]}\r\n        markers={[\r\n            {\r\n                axis: 'y',\r\n                value: 3,\r\n                lineStyle: { stroke: '#b0413e', strokeWidth: 2 },\r\n                legend: 'Vertical Marker',\r\n                legendOrientation: 'vertical',\r\n            },\r\n            {\r\n                axis: 'x',\r\n                value: 3000000,\r\n                lineStyle: { stroke: '#b0413e', strokeWidth: 2 },\r\n                legend: 'Horizontal Marker',\r\n            },\r\n        ]}\r\n        renderNode={CustomNode}\r\n        data={chartdata}\r\n        margin={{ top: 60, right: 140, bottom: 100, left: 90 }}\r\n        xScale={{ type: 'linear', min: 0, max: 'auto' }}\r\n        xFormat={function(e){return e}}\r\n        yScale={{ type: 'linear', min: 0, max: 'auto' }}\r\n        yFormat={function(e){return e}}\r\n        blendMode=\"multiply\"\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n            orient: 'bottom',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'Cumulative Volume',\r\n            legendPosition: 'middle',\r\n            legendOffset: 80,\r\n            tickRotation: -90\r\n        }}\r\n        axisLeft={{\r\n            orient: 'left',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'Predictability',\r\n            legendPosition: 'middle',\r\n            legendOffset: -60\r\n        }}\r\n        tooltip={({ node }) => (\r\n            <div\r\n            style={{\r\n                background: 'white',\r\n                padding: '9px 12px',\r\n                border: '1px solid #ccc',\r\n            }}\r\n            >\r\n                {/* {console.log(node)} */}\r\n                <span style={{color: node.style.color+''}}>\r\n                    {node.data.serieId}\r\n                </span>\r\n                <br />\r\n                {`Volume: ${node.data.formattedX}`}\r\n                <br />\r\n                {`Predictability: ${node.data.formattedY}`}\r\n            </div>\r\n        )}\r\n        legends={[\r\n            {\r\n                anchor: 'bottom-right',\r\n                direction: 'column',\r\n                justify: false,\r\n                translateX: 130,\r\n                translateY: 0,\r\n                itemWidth: 100,\r\n                itemHeight: 12,\r\n                itemsSpacing: 5,\r\n                itemDirection: 'left-to-right',\r\n                symbolSize: 12,\r\n                symbolShape: 'circle',\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemOpacity: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]}\r\n    />    \r\n</div>\r\n    )\r\n}\r\n\r\nexport default ForcastStability;\r\n"]},"metadata":{},"sourceType":"module"}