{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Components\\\\Map\\\\WorldMap.js\";\nimport React, { useState, useEffect } from \"react\";\nimport './Map.css';\nimport { withGoogleMap, withScriptjs, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport * as MapData from \"./Mapdata.json\";\nimport MyProvider, { MyContext } from \"../../MyProvider\"; //import mapStyles from \"./mapStyles\";\n\nfunction Map() {\n  const [selectedPark, setSelectedPark] = useState(null);\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(MyContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, context => /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 1,\n    defaultCenter: {\n      lat: 30.3601,\n      lng: -0.0589\n    }\n    /* defaultOptions={{ styles: mapStyles }} */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, MapData.ActivityCenter.map(AC => /*#__PURE__*/React.createElement(Marker\n  /*  key={park.properties.PARK_ID} */\n  , {\n    position: {\n      lat: AC.coordinates[0],\n      lng: AC.coordinates[1]\n    },\n    onClick: () => {\n      setSelectedPark(AC);\n    },\n    icon: {\n      url: AC.iconurl,\n      scaledSize: new window.google.maps.Size(25, 25)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), selectedPark && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    onCloseClick: () => {\n      setSelectedPark(null);\n    },\n    position: {\n      lat: selectedPark.coordinates[0],\n      lng: selectedPark.coordinates[1]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, console.log(context.state), console.log(context.increment), /*#__PURE__*/React.createElement(\"a\", {\n    value: selectedPark.name,\n    onClick: () => context.increment(selectedPark.name),\n    style: {\n      cursor: 'pointer'\n    },\n    className: \"ACLink\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 141\n    }\n  }, selectedPark.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, selectedPark.description))))));\n}\n\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\nexport default function WorldMap() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"270px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapWrapped, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDMVtICVlllbzey02Wi-iR0vY_a4SRDdhc&callback=initMap`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Components/Map/WorldMap.js"],"names":["React","useState","useEffect","withGoogleMap","withScriptjs","GoogleMap","Marker","InfoWindow","MapData","MyProvider","MyContext","Map","selectedPark","setSelectedPark","listener","e","key","window","addEventListener","removeEventListener","context","lat","lng","ActivityCenter","map","AC","coordinates","url","iconurl","scaledSize","google","maps","Size","console","log","state","increment","name","cursor","description","MapWrapped","WorldMap","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Map.css';\n\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\nimport * as MapData from \"./Mapdata.json\";\nimport MyProvider, { MyContext } from \"../../MyProvider\";\n//import mapStyles from \"./mapStyles\";\n\nfunction Map() {\n  const [selectedPark, setSelectedPark] = useState(null);\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  return (\n    <MyContext.Consumer>\n      { (context) => (\n    <GoogleMap\n      defaultZoom={1}\n      defaultCenter={{  lat: 30.3601, lng: -0.0589  }}\n      /* defaultOptions={{ styles: mapStyles }} */\n    >\n      {MapData.ActivityCenter.map(AC => (\n        <Marker\n         /*  key={park.properties.PARK_ID} */\n          position={{\n            lat: AC.coordinates[0],\n            lng: AC.coordinates[1]\n          }}\n          onClick={() => {\n            setSelectedPark(AC);\n          }}\n          icon={{\n            url: AC.iconurl,\n            scaledSize: new window.google.maps.Size(25, 25)\n          }}\n        />\n      ))}\n\n      {selectedPark && (\n        <div>\n        <InfoWindow\n          onCloseClick={() => {\n            setSelectedPark(null);\n          }}\n          position={{\n            lat: selectedPark.coordinates[0],\n            lng: selectedPark.coordinates[1],\n          }}\n        >\n          <div>\n            {console.log(context.state)}\n            {console.log(context.increment)}\n            <a value={selectedPark.name} onClick={() => context.increment(selectedPark.name)} style={{cursor:'pointer'}} className=\"ACLink\"><div>{selectedPark.name}</div></a>\n            <p>{selectedPark.description}</p>\n          </div>\n        </InfoWindow>\n        </div>\n      )}\n    </GoogleMap>\n      )}\n    </MyContext.Consumer>\n  );\n}\n\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\n\nexport default function WorldMap() {\n  return (\n    <div style={{ width: \"100%\", height: \"270px\" }}>\n      <MapWrapped\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDMVtICVlllbzey02Wi-iR0vY_a4SRDdhc&callback=initMap`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}