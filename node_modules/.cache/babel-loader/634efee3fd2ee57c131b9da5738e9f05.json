{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Demand\\\\Components\\\\CircularBarPlot\\\\CircularBarPlot.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select } from 'd3';\nimport * as d3 from 'd3';\n\nfunction CircularBarPlot() {\n  const chartdata = [{\n    'Country': 'USA',\n    'Value': 12534\n  }, {\n    'Country': 'Russia',\n    'Value': 6148\n  }, {\n    'Country': 'Germany',\n    'Value': 2615\n  }, {\n    'Country': 'China',\n    'Value': 2354\n  }, {\n    'Country': 'UAE',\n    'Value': 1148\n  }, {\n    'Country': 'Jordan',\n    'Value': 115\n  }];\n  const [data, setData] = useState(chartdata);\n  const svgRef = useRef();\n  const width = 400;\n  const height = 400;\n  const margin = {\n    top: 100,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  const innerRadius = 90;\n  const outerRadius = Math.min(width, height) / 2;\n  useEffect(() => {\n    const svg = select(svgRef.current).attr(\"width\", 700).attr(\"height\", 700).append(\"g\").attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\");\n    ;\n    const xScale = d3.scaleBand().range([0, 2 * Math.PI]) // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\n    .align(0) // This does nothing\n    .domain(data.map(data => {\n      console.log(\"Country name : \" + data.Country);\n      return data.Country;\n    }));\n    const yScale = d3.scaleRadial().range([innerRadius, outerRadius]) // Domain will be define later.\n    .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\n\n    console.log(\"data : \" + data); // Add the bars\n\n    svg.append(\"g\").selectAll(\"path\").data(data).join(\"g\").append(\"path\").attr(\"fill\", \"#69b3a2\").attr(\"d\", d3.arc() // imagine your doing a part of a donut plot\n    .innerRadius(innerRadius).outerRadius(function (d) {\n      return yScale(d['Value']);\n    }).startAngle(function (d) {\n      return xScale(d.Country);\n    }).endAngle(function (d) {\n      return xScale(d.Country) + xScale.bandwidth();\n    }).padAngle(0.01).padRadius(innerRadius));\n    svg.append(\"g\").selectAll(\"g\").data(data).join(\"g\").append(\"g\").attr(\"text-anchor\", function (d) {\n      return (xScale(d.Country) + xScale.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\";\n    }).attr(\"transform\", function (d) {\n      return \"rotate(\" + ((xScale(d.Country) + xScale.bandwidth() / 2) * 180 / Math.PI - 90) + \")\" + \"translate(\" + (yScale(d['Value']) + 10) + \",0)\";\n    }).append(\"text\").text(function (d) {\n      return d.Country;\n    }).attr(\"transform\", function (d) {\n      return (xScale(d.Country) + xScale.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\";\n    }).style(\"font-size\", \"11px\").attr(\"alignment-baseline\", \"middle\");\n  }, data);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '400px',\n      width: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default CircularBarPlot;\n/* svg\r\n    .selectAll(\"circle\")\r\n    .data(data)\r\n    .join(\"circle\")\r\n    .attr('r', value => value)\r\n    .attr('cx', value => value * 2)\r\n    .attr('cy', value => value * 2)\r\n    .attr('stroke', \"yellow\") */","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Demand/Components/CircularBarPlot/CircularBarPlot.js"],"names":["React","useRef","useEffect","useState","select","d3","CircularBarPlot","chartdata","data","setData","svgRef","width","height","margin","top","right","bottom","left","innerRadius","outerRadius","Math","min","svg","current","attr","append","xScale","scaleBand","range","PI","align","domain","map","console","log","Country","yScale","scaleRadial","selectAll","join","arc","d","startAngle","endAngle","bandwidth","padAngle","padRadius","text","style"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport { select } from 'd3';\r\nimport * as d3 from 'd3'\r\n\r\n\r\n\r\n\r\nfunction CircularBarPlot() {\r\n\r\n    const chartdata = [{ 'Country': 'USA', 'Value': 12534 }, { 'Country': 'Russia', 'Value': 6148 }, { 'Country': 'Germany', 'Value': 2615 },\r\n    { 'Country': 'China', 'Value': 2354 }, { 'Country': 'UAE', 'Value': 1148 }, { 'Country': 'Jordan', 'Value': 115 }\r\n    ];\r\n    const [data, setData] = useState(chartdata);\r\n    const svgRef = useRef();\r\n    const width = 400;\r\n    const height = 400;\r\n    const margin = { top: 100, right: 0, bottom: 0, left: 0 };\r\n    const innerRadius = 90;\r\n    const outerRadius = Math.min(width, height) / 2;\r\n\r\n\r\n    useEffect(() => {\r\n        const svg = select(svgRef.current)\r\n            .attr(\"width\", 700)\r\n            .attr(\"height\", 700)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\");;\r\n\r\n        const xScale = d3.scaleBand()\r\n            .range([0, 2 * Math.PI])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\r\n            .align(0)                  // This does nothing\r\n            .domain(data.map((data) => { console.log(\"Country name : \" + data.Country); return data.Country }));\r\n\r\n        const yScale = d3.scaleRadial()\r\n            .range([innerRadius, outerRadius])   // Domain will be define later.\r\n            .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\r\n\r\n        console.log(\"data : \" + data)\r\n\r\n        // Add the bars\r\n        svg.append(\"g\")\r\n            .selectAll(\"path\")\r\n            .data(data)\r\n            .join(\"g\")\r\n            .append(\"path\")\r\n            .attr(\"fill\", \"#69b3a2\")\r\n            .attr(\"d\", d3.arc()     // imagine your doing a part of a donut plot\r\n                .innerRadius(innerRadius)\r\n                .outerRadius(function (d) { return yScale(d['Value']); })\r\n                .startAngle(function (d) { return xScale(d.Country); })\r\n                .endAngle(function (d) { return xScale(d.Country) + xScale.bandwidth(); })\r\n                .padAngle(0.01)\r\n                .padRadius(innerRadius))\r\n\r\n\r\n        svg.append(\"g\")\r\n            .selectAll(\"g\")\r\n            .data(data)\r\n            .join(\"g\")\r\n            .append(\"g\")\r\n            .attr(\"text-anchor\", function (d) { return (xScale(d.Country) + xScale.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\r\n            .attr(\"transform\", function (d) { return \"rotate(\" + ((xScale(d.Country) + xScale.bandwidth() / 2) * 180 / Math.PI - 90) + \")\" + \"translate(\" + (yScale(d['Value']) + 10) + \",0)\"; })\r\n            .append(\"text\")\r\n            .text(function (d) { return (d.Country) })\r\n            .attr(\"transform\", function (d) { return (xScale(d.Country) + xScale.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\r\n            .style(\"font-size\", \"11px\")\r\n            .attr(\"alignment-baseline\", \"middle\")\r\n\r\n    }, data);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ height: '400px', width: '400px' }}>\r\n            <svg ref={svgRef}></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CircularBarPlot;\r\n\r\n\r\n\r\n\r\n/* svg\r\n    .selectAll(\"circle\")\r\n    .data(data)\r\n    .join(\"circle\")\r\n    .attr('r', value => value)\r\n    .attr('cx', value => value * 2)\r\n    .attr('cy', value => value * 2)\r\n    .attr('stroke', \"yellow\") */\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}