{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Demand\\\\Components\\\\CircularBarPlot\\\\CircularBarPlot.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select } from 'd3';\nimport * as d3 from 'd3';\n\nfunction CircularBarPlot() {\n  const chartdata = [{\n    'Country': 'USA',\n    'Value': 12534\n  }, {\n    'Country': 'Russia',\n    'Value': 6148\n  }, {\n    'Country': 'Germany',\n    'Value': 615\n  }];\n  const [data, setData] = useState(chartdata);\n  const svgRef = useRef();\n  const width = 400;\n  const height = 400;\n  const margin = {\n    top: 100,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  const innerRadius = 90;\n  const outerRadius = Math.min(width, height) / 2;\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const xScale = d3.scaleBand().range([0, 2 * Math.PI]) // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\n    .align(0) // This does nothing\n    .domain(data.map(() => {\n      return data.Country;\n    }));\n    const yScale = d3.scaleRadial().range([innerRadius, outerRadius]) // Domain will be define later.\n    .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\n\n    svg.attr(\"width\", 700).attr(\"height\", 700).append(\"g\").attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\"); // Add the bars\n\n    svg.append(\"g\").selectAll(\"path\").data(data).enter().append(\"path\").attr(\"fill\", \"#69b3a2\").attr(\"d\", d3.arc() // imagine your doing a part of a donut plot\n    .innerRadius(innerRadius).outerRadius(function (d) {\n      return yScale(d['Value']);\n    }).startAngle(function (d) {\n      return xScale(d.Country);\n    }).endAngle(function (d) {\n      return xScale(d.Country) + xScale.bandwidth();\n    }).padAngle(0.01).padRadius(innerRadius));\n  }, [data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '400px',\n      width: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default CircularBarPlot;\n/* svg\r\n    .selectAll(\"circle\")\r\n    .data(data)\r\n    .join(\"circle\")\r\n    .attr('r', value => value)\r\n    .attr('cx', value => value * 2)\r\n    .attr('cy', value => value * 2)\r\n    .attr('stroke', \"yellow\") */","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Demand/Components/CircularBarPlot/CircularBarPlot.js"],"names":["React","useRef","useEffect","useState","select","d3","CircularBarPlot","chartdata","data","setData","svgRef","width","height","margin","top","right","bottom","left","innerRadius","outerRadius","Math","min","svg","current","xScale","scaleBand","range","PI","align","domain","map","Country","yScale","scaleRadial","attr","append","selectAll","enter","arc","d","startAngle","endAngle","bandwidth","padAngle","padRadius"],"mappings":"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","sourcesContent":["import React,{useRef,useEffect,useState} from 'react';\r\nimport {select} from 'd3';\r\nimport * as d3 from 'd3'\r\n\r\n\r\n\r\n\r\nfunction CircularBarPlot() {\r\n\r\nconst chartdata = [{'Country':'USA','Value':12534},{'Country':'Russia','Value':6148},{'Country':'Germany','Value':615}];\r\nconst [data,setData] = useState(chartdata);\r\nconst svgRef = useRef();\r\nconst width = 400;\r\nconst height = 400;\r\nconst margin = {top: 100, right: 0, bottom: 0, left: 0};\r\nconst innerRadius = 90;\r\nconst outerRadius = Math.min(width, height) / 2; \r\n\r\n\r\nuseEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const xScale = d3.scaleBand()\r\n      .range([0, 2 * Math.PI])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\r\n      .align(0)                  // This does nothing\r\n      .domain(data.map(() => {return data.Country}));\r\n\r\n    const yScale = d3.scaleRadial()\r\n    .range([innerRadius, outerRadius])   // Domain will be define later.\r\n    .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\r\n\r\n\r\n    svg.attr(\"width\", 700)\r\n        .attr(\"height\", 700)\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\");\r\n\r\n    // Add the bars\r\n    svg.append(\"g\")\r\n        .selectAll(\"path\")\r\n        .data(data)\r\n        .enter()\r\n        .append(\"path\")\r\n        .attr(\"fill\", \"#69b3a2\")\r\n        .attr(\"d\", d3.arc()     // imagine your doing a part of a donut plot\r\n            .innerRadius(innerRadius)\r\n            .outerRadius(function (d) { return yScale(d['Value']); })\r\n            .startAngle(function (d) { return xScale(d.Country); })\r\n            .endAngle(function (d) { return xScale(d.Country) + xScale.bandwidth(); })\r\n            .padAngle(0.01)\r\n            .padRadius(innerRadius)) \r\n}, [data]);\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <div style={{height:'400px',width:'400px'}}>\r\n            <svg ref={svgRef}></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CircularBarPlot;\r\n\r\n\r\n\r\n\r\n/* svg\r\n    .selectAll(\"circle\")\r\n    .data(data)\r\n    .join(\"circle\")\r\n    .attr('r', value => value)\r\n    .attr('cx', value => value * 2)\r\n    .attr('cy', value => value * 2)\r\n    .attr('stroke', \"yellow\") */\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}