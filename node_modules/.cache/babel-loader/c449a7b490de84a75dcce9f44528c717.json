{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Demand\\\\Components\\\\CircularBarPlot\\\\CircularBarPlot.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport { select } from 'd3';\n\nfunction CircularBarPlot() {\n  const chartdata = [{\n    'Country': 'USA',\n    'Value': 12534\n  }, {\n    'Country': 'Russia',\n    'Value': 6148\n  }, {\n    'Country': 'Germany',\n    'Value': 615\n  }];\n  const [data, setData] = useState([10, 20, 30, 40]);\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    svg.selectAll(\"circle\").data(data).join(\"circle\").attr('r', value => value).attr('cx', value => value * 2).attr('cy', value => value * 2).attr('stroke', \"yellow\");\n  }, [data]);\n  /* useEffect(() => {\r\n  \r\n  let margin = { top: 100, right: 0, bottom: 0, left: 0 },\r\n  width = 460 - margin.left - margin.right,\r\n  height = 460 - margin.top - margin.bottom,\r\n  innerRadius = 90,\r\n  outerRadius = Math.min(width, height) / 2;\r\n      // append the svg object\r\n  let svg = d3.select(svgRef.current)\r\n  .append(\"svg\")\r\n  .attr(\"width\", width + margin.left + margin.right)\r\n  .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n  .attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\");\r\n  \r\n  \r\n  // Scales\r\n  let x = d3.scaleBand()\r\n      .range([0, 2 * Math.PI])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\r\n      .align(0)                  // This does nothing\r\n      .domain(data.map(d => { return d.Country; })); // The domain of the X axis is the list of states.\r\n  let y = d3.scaleRadial()\r\n      .range([innerRadius, outerRadius])   // Domain will be define later.\r\n      .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\r\n  \r\n  // Add the bars\r\n  svg.append(\"g\")\r\n      .selectAll(\"path\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"fill\", \"#69b3a2\")\r\n      .attr(\"d\", d3.arc()     // imagine your doing a part of a donut plot\r\n          .innerRadius(innerRadius)\r\n          .outerRadius(function (d) { return y(d['Value']); })\r\n          .startAngle(function (d) { return x(d.Country); })\r\n          .endAngle(function (d) { return x(d.Country) + x.bandwidth(); })\r\n          .padAngle(0.01)\r\n          .padRadius(innerRadius))\r\n  \r\n  // Add the labels\r\n  svg.append(\"g\")\r\n      .selectAll(\"g\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"g\")\r\n      .attr(\"text-anchor\", function (d) { return (x(d.Country) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\r\n      .attr(\"transform\", function (d) { return \"rotate(\" + ((x(d.Country) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")\" + \"translate(\" + (y(d['Value']) + 10) + \",0)\"; })\r\n      .append(\"text\")\r\n      .text(function (d) { return (d.Country) })\r\n      .attr(\"transform\", function (d) { return (x(d.Country) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\r\n      .style(\"font-size\", \"11px\")\r\n      .attr(\"alignment-baseline\", \"middle\");\r\n  \r\n  },data);\r\n  \r\n  \r\n  // set the dimensions and margins of the graph\r\n     // the outerRadius goes from the middle of the SVG area to the border */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '400px',\n      width: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    ref: svgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default CircularBarPlot;","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Demand/Components/CircularBarPlot/CircularBarPlot.js"],"names":["React","useRef","useEffect","useState","select","CircularBarPlot","chartdata","data","setData","svgRef","svg","current","selectAll","join","attr","value","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,MAAd,EAAqBC,SAArB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAQC,MAAR,QAAqB,IAArB;;AAKA,SAASC,eAAT,GAA2B;AAE3B,QAAMC,SAAS,GAAG,CAAC;AAAC,eAAU,KAAX;AAAiB,aAAQ;AAAzB,GAAD,EAAiC;AAAC,eAAU,QAAX;AAAoB,aAAQ;AAA5B,GAAjC,EAAmE;AAAC,eAAU,SAAX;AAAqB,aAAQ;AAA7B,GAAnE,CAAlB;AACA,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBL,QAAQ,CAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,CAAD,CAA/B;AACA,QAAMM,MAAM,GAAGR,MAAM,EAArB;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMQ,GAAG,GAAGN,MAAM,CAACK,MAAM,CAACE,OAAR,CAAlB;AACAD,IAAAA,GAAG,CACFE,SADD,CACW,QADX,EAECL,IAFD,CAEMA,IAFN,EAGCM,IAHD,CAGM,QAHN,EAICC,IAJD,CAIM,GAJN,EAIWC,KAAK,IAAIA,KAJpB,EAKCD,IALD,CAKM,IALN,EAKYC,KAAK,IAAIA,KAAK,GAAG,CAL7B,EAMCD,IAND,CAMM,IANN,EAMYC,KAAK,IAAIA,KAAK,GAAG,CAN7B,EAOCD,IAPD,CAOM,QAPN,EAOgB,QAPhB;AAQH,GAVQ,EAUN,CAACP,IAAD,CAVM,CAAT;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DI,sBACI;AAAK,IAAA,KAAK,EAAE;AAACS,MAAAA,MAAM,EAAC,OAAR;AAAgBC,MAAAA,KAAK,EAAC;AAAtB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,GAAG,EAAER,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH;;AAED,eAAeJ,eAAf","sourcesContent":["import React,{useRef,useEffect,useState} from 'react';\r\nimport {select} from 'd3';\r\n\r\n\r\n\r\n\r\nfunction CircularBarPlot() {\r\n\r\nconst chartdata = [{'Country':'USA','Value':12534},{'Country':'Russia','Value':6148},{'Country':'Germany','Value':615}];\r\nconst [data,setData] = useState([10,20,30,40]);\r\nconst svgRef = useRef();\r\n\r\n\r\n\r\nuseEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    svg\r\n    .selectAll(\"circle\")\r\n    .data(data)\r\n    .join(\"circle\")\r\n    .attr('r', value => value)\r\n    .attr('cx', value => value * 2)\r\n    .attr('cy', value => value * 2)\r\n    .attr('stroke', \"yellow\")\r\n}, [data])\r\n\r\n\r\n/* useEffect(() => {\r\n\r\nlet margin = { top: 100, right: 0, bottom: 0, left: 0 },\r\nwidth = 460 - margin.left - margin.right,\r\nheight = 460 - margin.top - margin.bottom,\r\ninnerRadius = 90,\r\nouterRadius = Math.min(width, height) / 2;\r\n    // append the svg object\r\nlet svg = d3.select(svgRef.current)\r\n.append(\"svg\")\r\n.attr(\"width\", width + margin.left + margin.right)\r\n.attr(\"height\", height + margin.top + margin.bottom)\r\n.append(\"g\")\r\n.attr(\"transform\", \"translate(\" + (width / 2 + margin.left) + \",\" + (height / 2 + margin.top) + \")\");\r\n\r\n\r\n// Scales\r\nlet x = d3.scaleBand()\r\n    .range([0, 2 * Math.PI])    // X axis goes from 0 to 2pi = all around the circle. If I stop at 1Pi, it will be around a half circle\r\n    .align(0)                  // This does nothing\r\n    .domain(data.map(d => { return d.Country; })); // The domain of the X axis is the list of states.\r\nlet y = d3.scaleRadial()\r\n    .range([innerRadius, outerRadius])   // Domain will be define later.\r\n    .domain([0, 14000]); // Domain of Y is from 0 to the max seen in the data\r\n\r\n// Add the bars\r\nsvg.append(\"g\")\r\n    .selectAll(\"path\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"path\")\r\n    .attr(\"fill\", \"#69b3a2\")\r\n    .attr(\"d\", d3.arc()     // imagine your doing a part of a donut plot\r\n        .innerRadius(innerRadius)\r\n        .outerRadius(function (d) { return y(d['Value']); })\r\n        .startAngle(function (d) { return x(d.Country); })\r\n        .endAngle(function (d) { return x(d.Country) + x.bandwidth(); })\r\n        .padAngle(0.01)\r\n        .padRadius(innerRadius))\r\n\r\n// Add the labels\r\nsvg.append(\"g\")\r\n    .selectAll(\"g\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"text-anchor\", function (d) { return (x(d.Country) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"end\" : \"start\"; })\r\n    .attr(\"transform\", function (d) { return \"rotate(\" + ((x(d.Country) + x.bandwidth() / 2) * 180 / Math.PI - 90) + \")\" + \"translate(\" + (y(d['Value']) + 10) + \",0)\"; })\r\n    .append(\"text\")\r\n    .text(function (d) { return (d.Country) })\r\n    .attr(\"transform\", function (d) { return (x(d.Country) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) < Math.PI ? \"rotate(180)\" : \"rotate(0)\"; })\r\n    .style(\"font-size\", \"11px\")\r\n    .attr(\"alignment-baseline\", \"middle\");\r\n\r\n},data);\r\n\r\n\r\n// set the dimensions and margins of the graph\r\n   // the outerRadius goes from the middle of the SVG area to the border */\r\n\r\n    return (\r\n        <div style={{height:'400px',width:'400px'}}>\r\n            <svg ref={svgRef}></svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CircularBarPlot;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}