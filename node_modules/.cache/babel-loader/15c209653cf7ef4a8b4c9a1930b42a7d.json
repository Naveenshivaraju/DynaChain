{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Demand\\\\Components\\\\UnitDemand\\\\UnitDemand.js\";\nimport React from 'react';\nimport { ResponsiveLine } from '@nivo/line';\nimport data from './Data.json';\n/* import Moment from 'moment'; */\n\nconst chartdata = data.data;\nconst styleById = {\n  \"Actuals\": {\n    /* strokeDasharray: '12, 6', */\n    strokeWidth: 4\n  },\n  \"Forcast\": {\n    /* strokeDasharray: '1, 16', */\n    strokeWidth: 4\n    /*   strokeLinejoin: 'round',\r\n      strokeLinecap: 'round', */\n\n  },\n  \"Upper Bound\": {\n    strokeWidth: 1\n  },\n  \"Lower Bound\": {\n    strokeWidth: 1,\n    pointSize: 2\n    /*  strokeDasharray: '4, 4',\r\n     strokeLinecap: 'round',\r\n     strokeLinejoin: 'round' */\n\n  },\n  default: {\n    strokeWidth: 4\n  }\n};\n\nconst UnitDemand = () => {\n  const DashedLine = ({\n    series,\n    lineGenerator,\n    xScale,\n    yScale\n  }) => {\n    return series.map(({\n      id,\n      data,\n      color\n    }) => /*#__PURE__*/React.createElement(\"path\", {\n      key: id,\n      d: lineGenerator(data.map(d => ({\n        x: xScale(d.data.x),\n        y: yScale(d.data.y)\n      }))),\n      fill: \"none\",\n      stroke: color,\n      style: styleById[id] || styleById.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: '500px',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveLine, {\n    markers: [\n    /*  {\r\n         axis: 'y',\r\n         value: 10,\r\n         lineStyle: { stroke: '#b0413e', strokeWidth: 2 },\r\n         legend: 'y marker',\r\n         legendOrientation: 'vertical',\r\n     }, */\n    {\n      axis: 'x',\n      value: \"03-Mar-2018\",\n      lineStyle: {\n        stroke: '#b0413e',\n        strokeWidth: 1\n      },\n      legend: 'Present Date'\n    }],\n    data: chartdata,\n    margin: {\n      top: 50,\n      right: 110,\n      bottom: 100,\n      left: 100\n    },\n    xScale: {\n      type: 'point',\n      min: 0,\n      max: 'auto',\n      stacked: false,\n      reverse: false\n    },\n    yScale: {\n      type: 'linear',\n      min: 0,\n      max: 200000,\n      stacked: false,\n      reverse: false\n    },\n    curve: \"monotoneX\",\n    lineWidth: 2,\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      orient: 'bottom',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n\n      /* legend: 'transportation', */\n      legendOffset: 36,\n      legendPosition: 'middle',\n      tickRotation: -90\n    },\n    axisLeft: {\n      orient: 'left',\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n\n      /* legend: 'count', */\n      legendOffset: -40,\n      legendPosition: 'middle'\n    },\n    enableGridX: false,\n    colors: [\"#4e7ac4\", \"red\", \"#1e306a\", \"green\"],\n    enablePoints: true,\n    pointSize: 5,\n    pointColor: {\n      theme: 'background'\n    },\n    pointBorderWidth: 2,\n    pointBorderColor: {\n      from: 'serieColor'\n    },\n    pointLabel: \"y\",\n    pointLabelYOffset: -12,\n    useMesh: false,\n    enableCrosshair: true,\n    crosshairType: \"x\",\n    enableSlices: \"x\",\n    sliceTooltip: ({\n      slice\n    }) => {\n      /*   console.log(slice) */\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          background: 'white',\n          padding: '9px 12px',\n          border: '1px solid #ccc'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }\n      }, \"Date: \", slice.points[0].data.x), slice.points.map(point => /*#__PURE__*/React.createElement(\"div\", {\n        key: point.id,\n        style: {\n          color: point.serieColor,\n          padding: '3px 0'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 37\n        }\n      }, point.serieId, \" \"), \": \", point.data.yFormatted.toLocaleString())));\n    },\n    layers: ['grid', 'markers', 'areas', 'crosshair', DashedLine, 'slices', 'points', 'axes', 'mesh', 'legends'],\n    legends: [{\n      anchor: 'bottom',\n      direction: 'row',\n      justify: false,\n      translateX: 0,\n      translateY: 102,\n      itemsSpacing: 0,\n      itemDirection: 'left-to-right',\n      itemWidth: 105,\n      itemHeight: 20,\n      itemOpacity: 0.8,\n      symbolSize: 12,\n      symbolShape: 'square',\n      symbolBorderColor: 'rgba(0, 0, 0, .5)',\n      effects: [{\n        on: 'hover',\n        style: {\n          itemBackground: 'rgba(0, 0, 0, .03)',\n          itemOpacity: 1\n        }\n      }]\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default UnitDemand;","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Demand/Components/UnitDemand/UnitDemand.js"],"names":["React","ResponsiveLine","data","chartdata","styleById","strokeWidth","pointSize","default","UnitDemand","DashedLine","series","lineGenerator","xScale","yScale","map","id","color","d","x","y","height","width","axis","value","lineStyle","stroke","legend","top","right","bottom","left","type","min","max","stacked","reverse","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","theme","from","slice","background","padding","border","points","point","serieColor","serieId","yFormatted","toLocaleString","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ResponsiveLine } from '@nivo/line';\r\nimport data from './Data.json'\r\n/* import Moment from 'moment'; */\r\n\r\nconst chartdata = data.data\r\n\r\nconst styleById = {\r\n    \"Actuals\": {\r\n        /* strokeDasharray: '12, 6', */\r\n        strokeWidth: 4,\r\n    },\r\n    \"Forcast\": {\r\n        /* strokeDasharray: '1, 16', */\r\n        strokeWidth: 4,\r\n      /*   strokeLinejoin: 'round',\r\n        strokeLinecap: 'round', */\r\n    },\r\n    \"Upper Bound\": {\r\n        strokeWidth: 1,\r\n    },\r\n    \"Lower Bound\": {\r\n        strokeWidth: 1,\r\n        pointSize: 2,\r\n       /*  strokeDasharray: '4, 4',\r\n        strokeLinecap: 'round',\r\n        strokeLinejoin: 'round' */\r\n    },\r\n    default: {\r\n        strokeWidth: 4,\r\n    },\r\n}\r\n\r\n\r\nconst UnitDemand = () => {\r\n\r\n    const DashedLine = ({ series, lineGenerator, xScale, yScale }) => {\r\n        return series.map(({ id, data, color }) => (\r\n            <path\r\n                key={id}\r\n                d={lineGenerator(\r\n                    data.map(d => ({\r\n                        x: xScale(d.data.x),\r\n                        y: yScale(d.data.y),\r\n                    }))\r\n                )}\r\n                fill=\"none\"\r\n                stroke={color}\r\n                style={styleById[id] || styleById.default}\r\n            />\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: '500px', width: '100%'}}>\r\n            <ResponsiveLine\r\n                markers={[\r\n                   /*  {\r\n                        axis: 'y',\r\n                        value: 10,\r\n                        lineStyle: { stroke: '#b0413e', strokeWidth: 2 },\r\n                        legend: 'y marker',\r\n                        legendOrientation: 'vertical',\r\n                    }, */\r\n                    {\r\n                        axis: 'x',\r\n                        value: \"03-Mar-2018\",\r\n                        lineStyle: { stroke: '#b0413e', strokeWidth: 1 },\r\n                        legend: 'Present Date',\r\n                    },\r\n                ]}\r\n                data={chartdata}\r\n                margin={{ top: 50, right: 110, bottom: 100, left: 100 }}\r\n                xScale={{ type: 'point', min: 0, max: 'auto', stacked: false, reverse: false  }}\r\n                yScale={{ type: 'linear', min: 0, max: 200000, stacked: false, reverse: false }}\r\n                curve=\"monotoneX\"\r\n                lineWidth={2}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    /* legend: 'transportation', */\r\n                    legendOffset: 36,\r\n                    legendPosition: 'middle',\r\n                    tickRotation: -90\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    /* legend: 'count', */\r\n                    legendOffset: -40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                enableGridX={false}\r\n                colors={[\"#4e7ac4\",\"red\",\"#1e306a\",\"green\"]}\r\n                enablePoints={true}\r\n                pointSize={5}\r\n                pointColor={{ theme: 'background' }}\r\n                pointBorderWidth={2}\r\n                pointBorderColor={{ from: 'serieColor' }}\r\n                pointLabel=\"y\"\r\n                pointLabelYOffset={-12}\r\n                useMesh={false}\r\n                enableCrosshair={true}\r\n                crosshairType=\"x\"\r\n                enableSlices=\"x\"\r\n                sliceTooltip={({ slice }) => {\r\n                  /*   console.log(slice) */\r\n                    return (\r\n                        <div\r\n                            style={{\r\n                                background: 'white',\r\n                                padding: '9px 12px',\r\n                                border: '1px solid #ccc',\r\n                            }}\r\n                        >\r\n                            <div>Date: {slice.points[0].data.x}</div>\r\n                            {slice.points.map(point => (\r\n                                <div\r\n                                    key={point.id}\r\n                                    style={{\r\n                                        color: point.serieColor,\r\n                                        padding: '3px 0',\r\n                                    }}\r\n                                >\r\n                                    <span>{point.serieId} </span>: {point.data.yFormatted.toLocaleString()}\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )\r\n                }}\r\n                layers={['grid', 'markers', 'areas', 'crosshair' , DashedLine, 'slices', 'points', 'axes',  'mesh', 'legends']}\r\n                legends={[\r\n                    {\r\n                        anchor: 'bottom',\r\n                        direction: 'row',\r\n                        justify: false,\r\n                        translateX: 0,\r\n                        translateY: 102,\r\n                        itemsSpacing: 0,\r\n                        itemDirection: 'left-to-right',\r\n                        itemWidth: 105,\r\n                        itemHeight: 20,\r\n                        itemOpacity: 0.8,\r\n                        symbolSize: 12,\r\n                        symbolShape: 'square',\r\n                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UnitDemand;\r\n"]},"metadata":{},"sourceType":"module"}