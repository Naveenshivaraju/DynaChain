{"ast":null,"code":"var _jsxFileName = \"D:\\\\TCS\\\\DynaChain\\\\dynachain\\\\dynachain-master\\\\dynachain\\\\src\\\\Components\\\\Map\\\\WorldMap.js\";\nimport React, { useState, useEffect } from \"react\";\nimport './Map.css';\nimport { withGoogleMap, withScriptjs, GoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport * as MapData from \"./Mapdata.json\";\nimport MyProvider, { MyContext } from \"../../MyProvider\"; //import mapStyles from \"./mapStyles\";\n\nfunction Map() {\n  const [selectedPark, setSelectedPark] = useState(null);\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n\n    window.addEventListener(\"keydown\", listener);\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(MyContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, context => /*#__PURE__*/React.createElement(GoogleMap, {\n    defaultZoom: 2,\n    defaultCenter: {\n      lat: 30.3601,\n      lng: -0.0589\n    }\n    /* defaultOptions={{ styles: mapStyles }} */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, MapData.ActivityCenter.map(AC => /*#__PURE__*/React.createElement(Marker, {\n    key: AC.key\n    /*  key={park.properties.PARK_ID} */\n    ,\n    position: {\n      lat: AC.coordinates[0],\n      lng: AC.coordinates[1]\n    },\n    onMouseOver: () => {\n      setSelectedPark(AC);\n    }\n    /* onMouseOut={() => {\n      setSelectedPark(null);\n    }} */\n    ,\n    icon: {\n      url: AC.iconurl,\n      scaledSize: new window.google.maps.Size(25, 25)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  })), selectedPark && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InfoWindow, {\n    onCloseClick: () => {\n      setSelectedPark(null);\n    },\n    position: {\n      lat: selectedPark.coordinates[0] + 11,\n      lng: selectedPark.coordinates[1]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    value: selectedPark.name,\n    onClick: () => context.increment(selectedPark.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ACLink\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 104\n    }\n  }, selectedPark.name)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, selectedPark.description))))));\n}\n\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\nexport default function WorldMap() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"320px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MapWrapped, {\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDMVtICVlllbzey02Wi-iR0vY_a4SRDdhc&callback=initMap`,\n    loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }),\n    containerElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 27\n      }\n    }),\n    mapElement: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: `100%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["D:/TCS/DynaChain/dynachain/dynachain-master/dynachain/src/Components/Map/WorldMap.js"],"names":["React","useState","useEffect","withGoogleMap","withScriptjs","GoogleMap","Marker","InfoWindow","MapData","MyProvider","MyContext","Map","selectedPark","setSelectedPark","listener","e","key","window","addEventListener","removeEventListener","context","lat","lng","ActivityCenter","map","AC","coordinates","url","iconurl","scaledSize","google","maps","Size","name","increment","description","MapWrapped","WorldMap","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Map.css';\n\nimport {\n  withGoogleMap,\n  withScriptjs,\n  GoogleMap,\n  Marker,\n  InfoWindow\n} from \"react-google-maps\";\nimport * as MapData from \"./Mapdata.json\";\nimport MyProvider, { MyContext } from \"../../MyProvider\";\n//import mapStyles from \"./mapStyles\";\n\nfunction Map() {\n  const [selectedPark, setSelectedPark] = useState(null);\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  return (\n    <MyContext.Consumer>\n      {\n        (context) => (\n          <GoogleMap\n            defaultZoom={2}\n            defaultCenter={{ lat: 30.3601, lng: -0.0589 }}\n          /* defaultOptions={{ styles: mapStyles }} */\n          >\n            {MapData.ActivityCenter.map(AC => (\n              <Marker key={AC.key}\n                /*  key={park.properties.PARK_ID} */\n                position={{\n                  lat: AC.coordinates[0],\n                  lng: AC.coordinates[1]\n                }}\n                onMouseOver={() => {\n                  setSelectedPark(AC);\n                }}\n                /* onMouseOut={() => {\n                  setSelectedPark(null);\n                }} */\n                icon={{\n                  url: AC.iconurl,\n                  scaledSize: new window.google.maps.Size(25, 25)\n                }}\n              />\n            ))}\n\n            {selectedPark && (\n              <div>\n                <InfoWindow\n                  onCloseClick={() => {\n                    setSelectedPark(null);\n                  }}\n                  \n                  position={{\n                    lat: selectedPark.coordinates[0]+11,\n                    lng: selectedPark.coordinates[1],\n                  }}\n                >\n                  <div>\n                   {/*  {console.log(context.state)}\n                    {console.log(context.increment)} */}\n                    <a value={selectedPark.name} onClick={() => context.increment(selectedPark.name)} ><div className=\"ACLink\">{selectedPark.name}</div></a>\n                    <p>{selectedPark.description}</p>\n                  </div>\n                </InfoWindow>\n              </div>\n            )}\n          </GoogleMap>\n        )}\n    </MyContext.Consumer>\n  );\n}\n\nconst MapWrapped = withScriptjs(withGoogleMap(Map));\n\nexport default function WorldMap() {\n  return (\n    <div style={{ width: \"100%\", height: \"320px\" }}>\n      <MapWrapped\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDMVtICVlllbzey02Wi-iR0vY_a4SRDdhc&callback=initMap`}\n        loadingElement={<div style={{ height: `100%` }} />}\n        containerElement={<div style={{ height: `100%` }} />}\n        mapElement={<div style={{ height: `100%` }} />}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}